@page "/products/form"

@using Modular.Api.Catalogs.Domains

@inject ProductService ProductService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<h3>Product</h3>


<EditForm Model="@Product" OnValidSubmit="@HandleValidSubmit" FormName="product" novalidate>
    <DataAnnotationsValidator />
    <FluentValidationSummary />

    <FluentStack Orientation="Orientation.Vertical">
        <div>
            <FluentTextField Name="Name" @bind-Value="Product.Name" Label="Name" style="width: 400px;" Required />
            <FluentValidationMessage For="@(() => Product.Name)" />
        </div>

        <div>
            <FluentTextArea Name="description" Rows=5 Cols=60 @bind-Value="Product.Description" Label="Description (optional)" Required />
            <FluentValidationMessage For="@(() => Product.Description)" />
        </div>

        <div>
            <FluentSelect Name="category" Value="Product.CategoryId" TOption="int" Required Label="Category" @onchange="OnCategoryChange">
                <FluentOption Value="">Select category ...</FluentOption>

                @foreach (var category in categories)
                {
                    <FluentOption Value="@category.Id.ToString()">@category.Name</FluentOption>
                }

            </FluentSelect>
            @* <FluentValidationMessage For="@(() => Product.CategoryId.ToString())" /> *@
        </div>

        <div>
            <FluentNumberField Name="price" @bind-Value="Product.Price" Label="Price" Required />
            <FluentValidationMessage For="@(() => Product.Price)" />
        </div>

        <div>
            <FluentNumberField Name="stock" @bind-Value="Product.Stock" Label="Stock" Required />
            <FluentValidationMessage For="@(() => Product.Stock)" />
        </div>

        <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>

    </FluentStack>

</EditForm>


@code {
    [Parameter]
    public int? Id { get; set; }


    [SupplyParameterFromForm]
    public Product? Product { get; set; } = new();

    private List<Category>? categories { get; set; } = new();


    private bool isEdit => Id.HasValue;



    protected override async Task OnInitializedAsync()
    {
        categories = await ProductService.GetCategoriesAsync();

        if (isEdit)
        {
            Product = await ProductService.GetProductByIdAsync(Id.Value);
        }
        else
        {
            Product = new();
        }


    }

    private void OnCategoryChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out var categoryId))
        {
            Product.CategoryId = categoryId;
        }
    }

    public async Task HandleValidSubmit()
    {
        await ProductService.CreateProductAsync(Product);

    }

}