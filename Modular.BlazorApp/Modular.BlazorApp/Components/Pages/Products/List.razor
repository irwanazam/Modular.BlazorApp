@page "/products"
@using Modular.Api.Product
@using Module.Product
@inject ProductService ProductService
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@attribute [StreamRendering]

<h3>Products</h3>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
                <th>Stock</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                    <td>@product.Stock</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditProduct(product.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-success" @onclick="AddProduct">Add New Product</button>
}

@code {
    private List<Product> products;

    protected override async Task OnInitializedAsync()
    {
        products = await ProductService.GetProducts();
    }

    private void AddProduct()
    {
        NavigationManager.NavigateTo("/products/add");
    }

    private void EditProduct(int id)
    {
        NavigationManager.NavigateTo($"/products/edit/{id}");
    }

    private async Task DeleteProduct(int id)
    {
        await ProductService.DeleteProduct(id);
        products = await ProductService.GetProducts();
    }
}